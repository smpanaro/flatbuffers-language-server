name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build-release:
    name: Build Release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive-name: flatbuffers-language-server-linux-x64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            archive-name: flatbuffers-language-server-macos-x64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive-name: flatbuffers-language-server-macos-arm64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive-name: flatbuffers-language-server-windows-x64.zip

    runs-on: ${{ matrix.os }}

    env:
      RUSTFLAGS: "-C strip=symbols"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: "recursive"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: tar czvf ${{ matrix.archive-name }} -C target/${{ matrix.target }}/release flatbuffers-language-server

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        run: powershell -Command "Compress-Archive -Path target\${{ matrix.target }}\release\flatbuffers-language-server.exe -DestinationPath ${{ matrix.archive-name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive-name }}
          path: ${{ matrix.archive-name }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*
          draft: true
          generate_release_notes: true
